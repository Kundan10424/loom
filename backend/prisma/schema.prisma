datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String          @id @default(cuid())
  username    String          @unique
  email       String          @unique
  password    String
  projects    Project[]       @relation("OwnerProjects")
  memberships ProjectMember[]
  FileVersion FileVersion[]
  comments    Comment[] // ðŸ‘ˆ New relation: all comments made by this user
  createdAt   DateTime        @default(now())
  Activity    Activity[]
}

model Project {
  id        String          @id @default(uuid())
  name      String
  type      String
  ownerId   String
  owner     User            @relation("OwnerProjects", fields: [ownerId], references: [id])
  files     File[]
  members   ProjectMember[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  Activity  Activity[]
}

model ProjectMember {
  id        String @id @default(cuid())
  role      String // "owner", "editor", "viewer"
  userId    String
  projectId String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId]) // Prevent duplicate membership
}

model File {
  id        String        @id @default(uuid())
  name      String
  type      String
  content   String?
  projectId String
  project   Project       @relation(fields: [projectId], references: [id])
  parentId  String?
  parent    File?         @relation("FileHierarchy", fields: [parentId], references: [id])
  children  File[]        @relation("FileHierarchy")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  versions  FileVersion[]
  comments  Comment[] // ðŸ‘ˆ New relation: all comments on this file
}

model FileVersion {
  id        String   @id @default(cuid())
  fileId    String
  file      File     @relation(fields: [fileId], references: [id])
  content   String
  authorId  String? // optional â€” track who edited
  author    User?    @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id         String    @id @default(cuid())
  fileId     String
  file       File      @relation(fields: [fileId], references: [id])
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  lineNumber Int? // optional â€” for inline code comments
  text       String
  resolved   Boolean   @default(false)
  parentId   String? // for threaded replies
  parent     Comment?  @relation("CommentThread", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentThread")
  createdAt  DateTime  @default(now())
}

model Activity {
  id        String   @id @default(cuid())
  type      String // e.g. "file_edit", "comment_added", "version_restore", "member_added"
  message   String // human-readable summary
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
